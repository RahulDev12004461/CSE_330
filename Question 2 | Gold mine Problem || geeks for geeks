class Solution {
public:
    int maxGold(int n, int m, vector<vector<int>> M) {
        const int MAXN = 50;
        vector<vector<int>> dp(MAXN, vector<int>(MAXN, -1));

        function<int(int, int)> getMaxGold = [&](int row, int col) -> int {
            if (row < 0 || row >= n || col < 0 || col >= m) {
                return 0;
            }

            if (dp[row][col] != -1) {
                return dp[row][col];
            }

            int right = getMaxGold(row, col + 1);
            int right_up = getMaxGold(row - 1, col + 1);
            int right_down = getMaxGold(row + 1, col + 1);

            return dp[row][col] = M[row][col] + max(right, max(right_up, right_down));
        };

        int maxGold = 0;
        for (int i = 0; i < n; i++) {
            int gold = getMaxGold(i, 0);
            maxGold = max(maxGold, gold);
        }

        return maxGold;
    }
};
